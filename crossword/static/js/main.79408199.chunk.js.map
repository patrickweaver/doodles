{"version":3,"sources":["BoardSquare.tsx","Board.tsx","BoardSize.tsx","ClueAnswer.tsx","Clues.tsx","ModeSelect.tsx","helpers/blankSquare.ts","helpers/nArray.ts","helpers/blankBoard.ts","helpers/letterOrBlank.ts","helpers/reGridBoard.ts","helpers/calculateBoard.ts","helpers/reNumberBoard.ts","helpers/clearBoardNumbers.ts","helpers/isWordStart.ts","helpers/clueAnswersFromFlatBoard.ts","helpers/condenseState.ts","helpers/onSelectSquare.ts","helpers/recalculateBoard.ts","helpers/extractClues.ts","helpers/reAddClues.ts","helpers/reSizeBoard.ts","helpers/updateAnswer.ts","helpers/updateAnswersOnBoard.ts","Editor.tsx","helpers/activateAll.ts","helpers/clearAll.ts","helpers/expandState.ts","Game.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BoardSquare","props","letterClass","mode","checkAnswers","answer","square","letter","selected","acrossMatch","selectedSquare","acrossWordNumber","downMatch","downWordNumber","selectedDirection","active","className","id","squareNumber","type","value","onChange","event","updatedSquare","target","toUpperCase","setBoardSquare","setSelectionRange","length","command","moveInput","onClick","onSelectSquare","maxLength","onKeyDown","key","preventDefault","setSelectedDirection","autoComplete","onDoubleClick","wordStart","Board","createBoardSquareSetter","rowIndex","colIndex","end","boardSize","partners","partnerIndexes","push","updatedBoard","board","newStatus","forEach","partner","pRow","pCol","updateBoard","updateDirection","newSquareNumber","right","left","down","up","newInput","document","getElementById","newInputAsInput","focus","select","newSquare","flat","boardSquares","map","row","correctBoard","BoardSize","useState","editing","setEditing","tempBoardSize","setTempBoardSize","newBoardSize","parseInt","updateBoardSize","ClueAnswer","answerInputRef","useRef","selectionStart","setSelectionStart","useEffect","current","start","clue","answerInputStyle","background","clueAnswer","width","style","ref","updateClueAnswer","index","dirIndex","Clues","newValue","cluesList","clueAnswers","item","number","ModeSelect","blankSquare","size","nArray","n","Array","from","_","i","blankBoard","rowCols","letterOrBlank","reGridBoard","flatBoard","calculateBoard","flatBoardWithWordNumbers","flatBoardCleared","clearBoardNumbers","wordNumber","reduce","updatedFlatBoard","firstCol","firstRow","rightOfBlack","underBlack","acrossWordStart","downWordStart","eitherWordStart","isWordStart","aWN","dWN","reNumberBoard","updatedAnswers","acrossNumbers","downNumbers","ca","direction","firstLetterSquareNumber","caIndex","indexOf","clueAnswersFromFlatBoard","condenseState","condWordStart","condBoard","a","bs","condCA","dir","miniJson","JSON","stringify","btoa","setSelectedSquare","console","log","updatedSelectedDirection","recalculateBoard","setBoard","setClueAnswers","clues","ar","c","extractClues","recalculatedUpdatedBoard","updatedClueAnswers","clueOrAnserArray","coaaIndex","answerFirstLetterNumber","reAddClues","reSizeBoard","slice","filter","diffBlankArray","fullBlankArray","extraRows","padIndex","concat","updateAnswer","uca","editIndex","oldLength","filler","repeat","updateAnswersOnBoard","property","answerIndex","updatedBoardSquare","Editor","blankBoardAndClues","setBoardSize","recalculateBoardWithSet","setMode","to","process","gameLink","execCommand","readOnly","e","updatedCAs","boardSquaresFlat","reGridedBoard","expandState","b64State","parse","atob","split","expWordStart","Game","game","hash","window","location","hashBoard","hashClueAnswers","clearedBoard","Object","assign","setCheckAnswers","checked","Footer","href","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79408199.chunk.js","sourcesContent":["import React from 'react';\nimport './BoardSquare.css';\n\n// Types:\nimport { boardSquare } from './types';\n\ninterface boardSquareProps {\n  rowIndex: number,\n  colIndex: number,\n  square: boardSquare,\n  boardSize: number,\n  setBoardSquare: (\n    updatedSquare: boardSquare,\n  ) => void,\n  mode: string,\n  answer: (string | null),\n  selectedSquare: [number, number],\n  onSelectSquare: (rowIndex: number, colIndex: number, updateDirection: boolean) => void,\n  selectedDirection: string,\n  setSelectedDirection: (direction: string) => void,\n  moveInput: (squareNumber: number, command: (\"right\" | \"left\" | \"down\" | \"up\"), updateDirection: boolean) => void,\n  checkAnswers: boolean,\n}\n\nfunction BoardSquare(props: boardSquareProps): JSX.Element {\n\n  function toggleSquareActive(event: React.MouseEvent<HTMLDivElement>): void {\n    // Should only be able to toggle in editor\n    if (props.mode === \"game\") return;\n    // This is kind of a hack, on double click call the onSelectSquare\n    // function again to cancel out the highlighted row toggle that\n    // happened on the first click.\n    props.onSelectSquare(-1, -1, false);\n    const updatedSquare = props.square;\n    updatedSquare.active = !updatedSquare.active;\n    updatedSquare.letter = \"\";\n    props.setBoardSquare(updatedSquare);\n  }\n\n  function addLetter(event: React.ChangeEvent<HTMLInputElement>): void {\n    // This object will be updated\n    const updatedSquare = props.square;\n    // Update letter value from event\n    const target = event.target;\n    updatedSquare.letter = target.value.toUpperCase();\n    props.setBoardSquare(updatedSquare);\n    // Select correct amount of word (for deletions)\n    target.setSelectionRange(0, target.value.length);\n    \n    // Don't increment input square on delete\n    if (updatedSquare.letter.length === 0) {\n      return;\n    }\n    // Increment input square on letter input\n    const command = props.selectedDirection === \"down\" ? \"down\" : \"right\";\n    props.moveInput(props.square.squareNumber, command, false);\n  }\n\n  function selectLetterOnFocus(event: (React.FocusEvent<HTMLInputElement> | React.MouseEvent<HTMLInputElement>)): void {\n    props.onSelectSquare(props.square.acrossWordNumber || 0, props.square.downWordNumber || 0, true)\n    const target = event.target as HTMLInputElement;\n    target.setSelectionRange(0, target.value.length); \n  }\n\n  // Navigate with arrow keys or backspace\n  // all other keys are ignored.\n  function keyPressed(event: React.KeyboardEvent): void {\n    let command: (\"up\" | \"left\" | \"down\" | \"right\" | null) = null;\n\n    // Override default behavior\n    if (\n      event.key === \"ArrowUp\"\n      || event.key === \"ArrowDown\"\n      || event.key === \"Backspace\"\n    ) {\n      event.preventDefault(); \n    }\n\n    // Update selected direction\n    if (event.key === \"ArrowDown\" || event.key === \"ArrowUp\") {\n      props.setSelectedDirection(\"down\");\n    } else if (event.key ===  \"ArrowLeft\" || event.key === \"ArrowRight\") {\n      props.setSelectedDirection(\"across\");\n    }\n\n    // Clear content on backspace\n    if (event.key === \"Backspace\") {\n      const updatedSquare = props.square;\n      updatedSquare.letter = \"\";\n      props.setBoardSquare(updatedSquare);\n    }\n\n    if (\n      event.key === \"ArrowUp\"\n      || (props.selectedDirection === \"down\" && event.key === \"Backspace\")\n    ) command = \"up\";\n    if (\n      event.key === \"ArrowLeft\"\n      || (props.selectedDirection === \"across\" && event.key === \"Backspace\")\n    ) command = \"left\";\n    if (event.key === \"ArrowDown\") command = \"down\";\n    if (event.key === \"ArrowRight\") command = \"right\";\n    if (command !== null) {\n      props.moveInput(props.square.squareNumber, command as (\"up\" | \"left\" | \"down\" | \"right\"), false);\n    }\n  }\n\n  // Set class for guess in Game mode\n  const letterClass: string = (props.mode === \"game\" && props.checkAnswers) ? (props.answer === props.square.letter ? \"correct\" : \"incorrect\") : \"\";\n\n  // Set class for selected row or column\n  let selected: string = \"\";\n  const acrossMatch = props.selectedSquare[0] === props.square.acrossWordNumber;\n  const downMatch = props.selectedSquare[1] === props.square.downWordNumber\n  if (\n    (\n      (\n        acrossMatch\n        && props.selectedDirection === \"across\"\n      ) || (\n        downMatch\n        && props.selectedDirection === \"down\"\n      )\n    )\n    && props.square.active\n  ) {\n    selected = \"selected-word\";\n    if (acrossMatch && downMatch) {\n      selected += \" selected-square\"\n    }\n  }\n\n  const letter = \n    <div className=\"letter\">\n      <input\n        id={`${props.square.squareNumber}-input`}\n        className={letterClass}\n        type=\"text\"\n        value={props.square.letter || ''}\n        onChange={addLetter}\n        onClick={selectLetterOnFocus}\n        maxLength={1}\n        onKeyDown={keyPressed}\n        autoComplete=\"off\"\n      />\n    </div>\n\n  const square =\n    <div\n      className={`board-square ${props.square.active ? selected : 'inactive'}`}\n      onDoubleClick={toggleSquareActive}\n    >\n      <div className=\"clue-number\">\n        {`${props.square.wordStart[0] ? props.square.acrossWordNumber : (props.square.wordStart[1] ? props.square.downWordNumber : '')}`}\n      </div>\n\n      {props.square.active ? letter : null}\n      \n    </div>\n  \n  return square;\n}\n\nexport default BoardSquare;","import React from 'react';\nimport './Board.css';\nimport BoardSquare from './BoardSquare';\n\n// Types:\nimport { boardSquare, clueAnswer } from './types';\n\ninterface boardProps {\n  clueAnswers: clueAnswer[][],\n  board: boardSquare[][],\n  correctBoard?: boardSquare[][],\n  boardSize: number,\n  updateBoard: (board: boardSquare[][]) => void,\n  mode: string,\n  selectedSquare: [number, number],\n  onSelectSquare: (acrossWordNumber: number, downWordNumber: number, updateDirection: boolean) => void,\n  selectedDirection: string,\n  setSelectedDirection: (direction: string) => void,\n  checkAnswers: boolean,\n}\n\nfunction Board(props: boardProps): JSX.Element {\n\n  const createBoardSquareSetter = (rowIndex: number, colIndex: number): (updatedSquare: boardSquare) => void => {\n    const end = props.boardSize - 1;\n    const mode = props.mode;\n    let partners: number[][] = [];\n    \n    if (mode === 'diagonal' || mode === 'square') {\n      const partnerIndexes = [end - rowIndex, end - colIndex];\n      partners.push(partnerIndexes);\n    }\n    \n    if (mode === 'horizontal' || mode === 'horizontal-vertical'|| mode === 'square') {\n      const partnerIndexes = [rowIndex, end - colIndex];\n      partners.push(partnerIndexes);\n    }\n    \n    if (mode === 'vertical' || mode === 'horizontal-vertical'|| mode === 'square') {\n      const partnerIndexes = [end - rowIndex, colIndex];\n      partners.push(partnerIndexes);\n    }\n\n    return (updatedSquare: boardSquare) => {\n      const updatedBoard: boardSquare[][] = [...props.board];\n      const newStatus = updatedSquare.active;\n      updatedBoard[rowIndex][colIndex] = updatedSquare;\n      partners.forEach(partner => {\n        const [pRow, pCol] = partner;\n        updatedBoard[pRow][pCol].active = newStatus;\n      });\n      props.updateBoard(updatedBoard);\n    }\n  }\n\n  function moveInput(squareNumber: number, command: (\"right\" | \"left\" | \"down\" | \"up\"), updateDirection: boolean): void {\n    const offsets = {\n      right: 1,\n      left: -1,\n      down: props.boardSize,\n      up: -props.boardSize,\n    }\n\n    let newSquareNumber: number = squareNumber + offsets[command];\n\n    const newInput = document.getElementById(`${newSquareNumber}-input`);\n    // Reasons it might not exist:\n    // - Next square is inactive\n    // - Last row/last square\n    const newInputAsInput = newInput as HTMLInputElement;\n    if (newInput) {\n      newInputAsInput.focus();\n      newInputAsInput.select();\n      // Update selected square\n      const newSquare = props.board.flat()[newSquareNumber];\n      if (newSquare) {\n        props.onSelectSquare(newSquare.acrossWordNumber || 0, newSquare.downWordNumber || 0, false)\n      }\n    }\n  }\n\n  const boardSquares: JSX.Element[] = props.board.map((row: boardSquare[], rowIndex: number): JSX.Element => {\n    return (\n      <div key={`row-${rowIndex}`} className=\"board-row\">\n        {\n          row.map((square: boardSquare, colIndex: number): JSX.Element => {\n            const answer = props.correctBoard ? props.correctBoard[rowIndex][colIndex].letter : null;\n            return <BoardSquare\n              key={`${rowIndex}-${colIndex}`}\n              rowIndex={rowIndex}\n              colIndex={colIndex}\n              boardSize={props.boardSize}\n              square={square}\n              setBoardSquare={createBoardSquareSetter(rowIndex, colIndex)}\n              mode={props.mode}\n              answer={answer}\n              selectedSquare={props.selectedSquare}\n              onSelectSquare={props.onSelectSquare}\n              selectedDirection={props.selectedDirection}\n              setSelectedDirection={props.setSelectedDirection}\n              moveInput={moveInput}\n              checkAnswers={props.checkAnswers}\n            />\n          })\n        }\n      </div>\n    )\n  })\n\n  const board: JSX.Element = \n    <div id=\"board\">\n      {boardSquares}\n    </div>\n  \n  return (\n    <div>\n      <h2>Board</h2>\n      {board}\n    </div>\n  )\n}\n\nexport default Board;","import React, { useState } from 'react';\n\nimport './BoardSize.css';\n\n\ninterface boardSizeProps {\n  boardSize: number,\n  updateBoardSize: (newBoardSize: number) => void,\n}\n\nexport default function BoardSize(props: boardSizeProps): JSX.Element {\n\n  const [editing, setEditing] = useState(false);\n  const [tempBoardSize, setTempBoardSize] = useState(props.boardSize);\n\n  function tempUpdateBoardSize(event: React.ChangeEvent<HTMLInputElement>): void {\n    const newBoardSize: number = parseInt(event.target.value);\n    setTempBoardSize(newBoardSize)\n  }\n\n  function endEditing(): void {\n    setEditing(false);\n    props.updateBoardSize(tempBoardSize);\n  }\n\n  let boardSize;\n  if (editing) {\n    boardSize = (\n      <div>\n        <label className=\"bs-label\">\n          Update Board Size:\n        </label>\n        <input\n          className=\"bs-element\"\n          type=\"number\"\n          value={tempBoardSize}\n          onChange={tempUpdateBoardSize}\n        />\n        <button\n          className=\"bs-element\"\n          onClick={endEditing}\n        >\n          Save\n        </button>\n      </div>\n    )\n  } else {\n    boardSize = (\n      <div>\n        <h4 className=\"bs-element\">\n          Board Size: {props.boardSize}\n        </h4>\n        <button\n          className=\"bs-element\"\n          onClick={() => setEditing(true)}\n        >\n          Change\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div id=\"board-size\">\n      {boardSize}\n    </div>\n  )\n}","import React, { useRef, useState, useEffect } from 'react';\n\nimport './ClueAnswer.css';\n\n// Types:\nimport { clueAnswer } from './types';\n\ninterface clueAnswerProps {\n  clueAnswer: clueAnswer,\n  updateClueAnswer: (\n    type: (\"answer\" | \"clue\"),\n    newValue: string,\n    index: number,\n    dirIndex: number,\n    selectionStart?: number\n  ) => void,\n  dirIndex: number,\n  index: number,\n  mode: string,\n}\n\nfunction ClueAnswer(props: clueAnswerProps): JSX.Element {\n\n  const answerInputRef = useRef<HTMLInputElement>(null);\n\n  const [selectionStart, setSelectionStart] = useState<(number | null)>(0);\n\n  useEffect((): void => {\n    if (answerInputRef.current && selectionStart !== null) {\n      const start = selectionStart || 0;\n      answerInputRef.current.setSelectionRange(start, start);\n      setSelectionStart(null);\n    }\n  }, [selectionStart]);\n\n  function updateAnswer(event: React.ChangeEvent<HTMLInputElement>): void {\n    const { value, selectionStart} = event.target;\n    setSelectionStart((selectionStart || 0));\n    props.updateClueAnswer(\"answer\", value.toUpperCase(), props.index, props.dirIndex, selectionStart || 0);\n  }\n\n  function updateClue(event: React.ChangeEvent<HTMLInputElement>): void {\n    const { value } = event.target;\n    props.updateClueAnswer(\"clue\", value, props.index, props.dirIndex);\n  }\n\n  const answerInputStyle = {\n    background: `repeating-linear-gradient(90deg, black 0, black 1.25ch, transparent 0, transparent 2ch) 5px 85%/ ${props.clueAnswer.answer.length * (2)}ch 1px no-repeat`,\n    width: `Calc(2ch * ${props.clueAnswer.answer.length} - 1px)`,\n  }\n\n  let answer;\n  let clue;\n  if (props.mode === \"editor\") {\n    answer = (\n      <li>\n        <label className=\"ca-label\">Answer:</label>\n        <input\n          style={answerInputStyle}\n          className=\"answer\"\n          ref={answerInputRef}\n          value={props.clueAnswer.answer}\n          onChange={updateAnswer}\n          autoComplete=\"off\"\n        />\n      </li>\n    )\n    clue = (\n      <li>\n        <label className=\"ca-label\">Clue:</label>\n        <input\n          className=\"clue\"\n          value={props.clueAnswer.clue}\n          onChange={updateClue}\n          autoComplete=\"off\"\n        />\n      </li>\n    )\n  } else {\n    clue = (\n      <li>\n        <p>\n          {props.clueAnswer.clue}\n        </p>\n      </li>\n    )\n  }\n\n  return (\n    <ul className=\"clue-answer\">\n      {clue}\n      {answer}\n    </ul>\n  )\n}\n\nexport default ClueAnswer;","import React from 'react';\nimport './Clues.css';\n\nimport ClueAnswer from './ClueAnswer';\n\n// Types:\nimport { clueAnswer } from './types';\n\ninterface cluesProps {\n  clueAnswers: clueAnswer[][],\n  updateClueAnswer?: (type: (\"answer\" | \"clue\"), newValue: string, dirIndex: number, caIndex: number, selectionStart?: number) => void,\n  mode: string,\n}\n\nfunction Clues(props: cluesProps): JSX.Element {\n\n  function updateClueAnswer(\n    type: (\"answer\" | \"clue\"),\n    newValue: string,\n    index: number,\n    dirIndex: number,\n    selectionStart?: number, // Undefined for clues\n  ) {\n    if (props.updateClueAnswer) {\n      props.updateClueAnswer(type, newValue, dirIndex, index, selectionStart)\n    }\n  }\n\n  const cluesList = (clueAnswers: clueAnswer[], dirIndex: number): JSX.Element => {\n\n    return (\n      <ol className=\"clue-answers-list\">\n        {clueAnswers.map(\n          (item: clueAnswer, index: number) => {\n\n            return (\n              <li\n                key={index}\n                value={item.number}\n              >\n                <ClueAnswer\n                  clueAnswer={item}\n                  updateClueAnswer={updateClueAnswer}\n                  dirIndex={dirIndex}\n                  index={index}\n                  mode={props.mode}\n                />\n              </li>\n            )\n          }\n        )}\n      </ol>\n    )\n  }\n  \n  return (\n    <div>\n        <ul className=\"clue-answers-sections\">\n          <li>\n            <h3>Across:</h3>\n            {cluesList(props.clueAnswers[0], 0)}\n          </li>\n          <li>\n            <h3>Down:</h3>\n            {cluesList(props.clueAnswers[1], 1)}\n          </li>\n\n        </ul>\n    </div>\n  )\n}\n\nexport default Clues;","import React from 'react';\n\nimport './ModeSelect.css';\n\nexport interface modeSelectProps {\n  mode: string,\n  onChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n}\n\nexport default function ModeSelect(props: modeSelectProps): JSX.Element {\n  \n  return (\n    <div className=\"mode-select\">\n      <h4>Toggle Square Symmetry Mode:</h4>\n      <select onChange={props.onChange}>\n        <option>normal</option>\n        <option>horizontal</option>\n        <option>vertical</option>\n        <option>diagonal</option>\n        <option>horizontal-vertical</option>\n        <option>square</option>\n      </select>\n    </div>\n  );\n}","import { boardSquare } from '../types';\n\nexport default function blankSquare(rowIndex: number, colIndex: number, size: number): boardSquare {\n  const bs: boardSquare = {\n    active: true,\n    letter: \"\",\n    wordStart: [false, false],\n    acrossWordNumber: null,\n    downWordNumber: null,\n    squareNumber: (rowIndex * size) + colIndex,\n  }\n  return bs;\n}","// Return an array of length n with indexes as values\n\nexport default function nArray(n: number): number[] {\n  return Array.from({length: n}, (_: undefined, i: number): number => i)\n}","import { boardSquare } from '../types';\nimport blankSquare from './blankSquare';\nimport nArray from './nArray';\n\n\n// Build a blank board of the correct size\n\nexport default function blankBoard(size: number): boardSquare[][] {\n  const rowCols: number[] = nArray(size);\n  return rowCols.map((rowIndex: number) => {\n    return rowCols.map((colIndex: number) => {\n      return blankSquare(rowIndex, colIndex, size);\n    });\n  });\n}","// Return either the letter passed in or a space char if null\n\nexport default function letterOrBlank(letter: (string | null)): string {\n  return (letter || \" \");\n}","import { boardSquare } from '../types';\n\nimport nArray from './nArray';\n\n// Converts a flattened board back into a 2D grid \n\nexport default function reGridBoard(flatBoard: boardSquare[], boardSize: number): boardSquare[][] {\n  const rowCols: number[] = nArray(boardSize);\n  return rowCols.map((rowIndex: number): boardSquare[] => {\n    return rowCols.map((colIndex: number): boardSquare => {\n      const index = (rowIndex * boardSize) + colIndex;\n      return flatBoard[index];\n    });\n  });\n}","import { boardSquare, clueAnswer } from '../types';\n\nimport clueAnswersFromFlatBoard from './clueAnswersFromFlatBoard';\nimport reGridBoard from './reGridBoard';\nimport reNumberBoard from './reNumberBoard';\n\nexport default function calculateBoard(board: boardSquare[][]): [boardSquare[][], clueAnswer[][]] {\n\n  const boardSize = board.length;\n\n  // Update each square's word numbers based on\n  // other squares across and down from it\n  const flatBoardWithWordNumbers = reNumberBoard(board.flat(), boardSize);\n\n  // Find Across and Down Clues:\n  const updatedAnswers: clueAnswer[][] = clueAnswersFromFlatBoard(flatBoardWithWordNumbers);\n\n  // Put board back into 2D array\n  const reGridedBoard: boardSquare[][] = reGridBoard(flatBoardWithWordNumbers, boardSize);\n\n  return [reGridedBoard, updatedAnswers];\n}","import { boardSquare, boardSquareContext, wordStart } from '../types';\nimport isWordStart from './isWordStart';\nimport clearBoardNumbers from './clearBoardNumbers';\n\n// Update down and across word numbers based on active board squares\n\nexport default function reNumberBoard(flatBoard: boardSquare[], boardSize: number): boardSquare[] {\n\n  const flatBoardCleared = clearBoardNumbers(flatBoard);\n\n  let wordNumber = 1; // clueAnswers are 1 indexed\n\n  return flatBoardCleared.reduce((updatedFlatBoard: boardSquare[], square: boardSquare, index: number, flatBoard: boardSquare[]): boardSquare[] => {\n\n    const bsContext: boardSquareContext = { flatBoard, index, boardSize }\n    const { downWordStart, acrossWordStart, eitherWordStart }: wordStart = isWordStart(bsContext);\n    if (square.active) {\n      let aWN: (number | null) = null, dWN: (number | null) = null;\n      // Find start of words:\n      if (eitherWordStart) {\n        if (acrossWordStart) {\n          square.wordStart[0] = true;\n          aWN = wordNumber;\n        }\n        if (downWordStart) {\n          square.wordStart[1] = true;\n          dWN = wordNumber;\n        }\n        wordNumber += 1;\n      }\n      // Set wordNumbers for non start words based on previous\n      square.acrossWordNumber = aWN || updatedFlatBoard[index - 1].acrossWordNumber;\n      square.downWordNumber = dWN || updatedFlatBoard[index - boardSize].downWordNumber;\n      square.squareNumber = index;\n    }\n    updatedFlatBoard.push(square);\n    return updatedFlatBoard;\n  }, []);\n}","import { boardSquare } from '../types';\n\n// Clear existing down and across word numbers from a flattened board\n\nexport default function clearBoardNumbers(flatBoard: boardSquare[]): boardSquare[] {\n  return flatBoard.map(square => {\n    // Clear all word numbers:\n    square.wordStart = [false, false];\n    square.acrossWordNumber = null;\n    square.downWordNumber = null;\n    return square;\n  })\n}","import { boardSquareContext, wordStart } from '../types';\n\n// Determine whether a square at an index of a flattened board is the start of a down word, an across word, or either\n\nexport default function isWordStart({flatBoard, index, boardSize}: boardSquareContext): wordStart {\n\n  const firstCol = index % boardSize === 0;\n  const firstRow = index < boardSize;\n\n  // Only need to check these if the corresponding var above is false\n  let rightOfBlack = false, underBlack = false;\n  if (!firstCol) {\n    rightOfBlack = !flatBoard[index - 1].active;\n  }\n  if (!firstRow) {\n    underBlack = !flatBoard[index - boardSize].active;\n  }\n\n  const acrossWordStart = firstCol || rightOfBlack;\n  const downWordStart = firstRow || underBlack;\n\n  return {\n    acrossWordStart: acrossWordStart,\n    downWordStart: downWordStart,\n    eitherWordStart: acrossWordStart || downWordStart,\n  }\n}","import { boardSquare, clueAnswer } from '../types';\n\nimport letterOrBlank from './letterOrBlank';\n\n// Updates answers based on updated board numbers\n\nexport default function clueAnswersFromFlatBoard(flatBoardWithWordNumbers: boardSquare[]) {\n  return flatBoardWithWordNumbers.reduce((clueAnswers: clueAnswer[][], square: boardSquare, index: number): clueAnswer[][] => {\n\n    // Inactive Squares\n    if (!square.acrossWordNumber || !square.downWordNumber) {\n      return clueAnswers;\n    }\n    \n    const acrossNumbers = clueAnswers[0].map(i => i.number);\n    const downNumbers = clueAnswers[1].map(i => i.number);\n\n    if (square.wordStart[0]) {\n    // Find starts of words\n      const ca: clueAnswer = {\n        direction: 'across',\n        number: square.acrossWordNumber,\n        clue: '',\n        answer: letterOrBlank(square.letter),\n        firstLetterSquareNumber: index,\n      }\n      clueAnswers[0].push(ca);\n    } else {\n      const caIndex = acrossNumbers.indexOf(square.acrossWordNumber);\n      clueAnswers[0][caIndex].answer += letterOrBlank(square.letter);\n    }\n    \n    if (square.wordStart[1]) {\n      const ca: clueAnswer = {\n        direction: 'down',\n        number: square.downWordNumber,\n        clue: '',\n        answer: letterOrBlank(square.letter),\n        firstLetterSquareNumber: index,\n      }\n      clueAnswers[1].push(ca);\n    } else {\n      const caIndex = downNumbers.indexOf(square.downWordNumber);\n      clueAnswers[1][caIndex].answer += letterOrBlank(square.letter);\n    }\n\n    return clueAnswers;\n\n  }, [[], []]);\n}","import { boardSquare, clueAnswer } from '../types';\n\nexport default function condenseState(board: boardSquare[][], clueAnswers: clueAnswer[][]): string {\n  function condWordStart(wordStart: [boolean, boolean]): string {\n    const [a, b] = wordStart;\n    const aStr = a ? 't' : 'f';\n    const bStr = b ? 't' : 'f';\n    return aStr + bStr;\n  }\n\n\n  const condBoard = board.map(a => a.map(bs => {\n    return [\n      bs.active ? 't' : 'f',\n      bs.letter,\n      condWordStart(bs.wordStart),\n      bs.acrossWordNumber,\n      bs.downWordNumber,\n      bs.squareNumber\n    ]\n  }));\n  const condCA = clueAnswers.map(dir => dir.map(ca => {\n    return [\n      ca.direction === 'down' ? 'd' : 'a',\n      ca.number,\n      ca.clue,\n      ca.answer,\n      ca.firstLetterSquareNumber\n    ]\n  }));\n  const miniJson = JSON.stringify([condBoard, condCA]);\n  return btoa(miniJson);\n}","export default function onSelectSquare(\n  selectedSquare: [number, number],\n  setSelectedSquare: (selectedSquare: [number, number]) => void,\n  selectedDirection: string,\n  setSelectedDirection: (selectedDirection: string) => void,\n  acrossWordNumber: number,\n  downWordNumber: number,\n  updateDirection: boolean,\n): void {\n  console.log(\"On select\", selectedDirection);\n  let updatedSelectedDirection = selectedDirection;\n  // Cancel on double click, reset direction, don't update square\n  if (acrossWordNumber === -1 && downWordNumber === -1) {\n    updatedSelectedDirection = selectedDirection === \"across\" ? \"down\" : \"across\";\n  } else {\n    if (acrossWordNumber === selectedSquare[0] && downWordNumber === selectedSquare[1]) {\n      updatedSelectedDirection = selectedDirection === \"across\" ? \"down\" : \"across\";\n    } else if (selectedDirection === \"none\") {\n      updatedSelectedDirection = \"across\";\n    }\n    setSelectedSquare([acrossWordNumber, downWordNumber]);\n  }\n  if (updateDirection) {\n    setSelectedDirection(updatedSelectedDirection);\n  }\n}","import { boardSquare, clueAnswer } from '../types';\n\nimport calculateBoard from './calculateBoard';\nimport extractClues from './extractClues';\nimport reAddClues from './reAddClues';\n\nexport default function recalculateBoard(\n  updatedBoard: boardSquare[][],\n  clueAnswers: clueAnswer[][],\n  setBoard: (updatedBoard: boardSquare[][]) => void,\n  setClueAnswers: (updatedClueAnswers: clueAnswer[][]) => void,\n): void {\n  // Save clue values:\n  const clues: {[key: number]: string}[] = extractClues(clueAnswers);\n  // Update clueAnswer numbers:\n  const [recalculatedUpdatedBoard, updatedAnswers] = calculateBoard(updatedBoard);\n  // Re-add clue values:\n  const updatedClueAnswers: clueAnswer[][] = reAddClues(updatedAnswers, clues)\n  setBoard(recalculatedUpdatedBoard);\n  setClueAnswers(updatedClueAnswers);\n}","import { clueAnswer } from '../types';\n\nexport default function extractClues(clueAnswers: clueAnswer[][]): {[key: number]: string}[] {\n  return clueAnswers.map(ar => {\n    return ar.reduce((a, c) => {\n      const index: (number | null) = c.firstLetterSquareNumber\n      if (index != null) {\n        a[index] = c.clue;\n      }\n      return a;\n    }, {} as {[key: number]: string});\n  })\n}","import { clueAnswer } from '../types';\n\nexport default function reAddClues(updatedAnswers: clueAnswer[][], clues: {[key: number]: string}[]): clueAnswer[][] {\n  return updatedAnswers.map((clueOrAnserArray, coaaIndex) => {\n    return clueOrAnserArray.map((ca) => {\n      const answerFirstLetterNumber = ca.firstLetterSquareNumber;\n      if (\n        answerFirstLetterNumber !== null\n        && clues[coaaIndex][answerFirstLetterNumber]\n      ) {\n        ca.clue = clues[coaaIndex][answerFirstLetterNumber];\n      } else {\n        ca.clue = \"\";\n      }\n      return ca;\n    });\n  });\n}","import { boardSquare } from '../types';\n\nimport blankSquare from './blankSquare';\nimport nArray from './nArray';\n\nexport default function reSizeBoard(board: boardSquare[][], newBoardSize: number, boardSize: number): boardSquare[][] {\n  let updatedBoard: boardSquare[][] = [...board];\n  if (newBoardSize < boardSize) {\n    updatedBoard = board\n      // remove squares from each row:\n      .map((row) => row.slice(0, newBoardSize))\n      // remove rows beyond board size:\n      .filter((_, index) => index < newBoardSize);\n  } else if (newBoardSize > boardSize) {\n    const diff: number = newBoardSize - boardSize;\n    const diffBlankArray: number[] = nArray(diff);\n    const fullBlankArray: number[] = nArray(newBoardSize);\n    // Function to build an array of squares when we know the rowIndex\n    const makePaddingSquares = (rowIndex: number): boardSquare[] => {\n      return diffBlankArray.map((padIndex) => {\n        return blankSquare(rowIndex, boardSize + padIndex, newBoardSize);\n      });\n    }\n    // Function to build a full row array of square when we know the rowIndex\n    const makeFullRow = (rowIndex: number): boardSquare[] => {\n      return fullBlankArray.map((colIndex) => blankSquare(rowIndex, colIndex, newBoardSize));\n    }\n    const extraRows: boardSquare[][] = diffBlankArray.map((padIndex) => {\n      return makeFullRow(boardSize + padIndex);\n    });\n    updatedBoard = board\n      // add blank squares to each row:\n      .map((row, index) => row.concat(makePaddingSquares(index)))\n      // add additional blank rows:\n      .concat(extraRows);\n  }\n  return updatedBoard;\n}","import { clueAnswer } from '../types';\n\nexport default function updateAnswer(uca: clueAnswer, newValue: string, selectionStart: number): clueAnswer {\n  let editIndex = selectionStart || 0;\n  const oldLength: number = uca.answer.length;\n  if (newValue.length < oldLength) {\n  const filler = \" \".repeat(oldLength - newValue.length);\n  // Deleted characters: \n    uca.answer = (newValue.slice(0, editIndex) + filler + newValue.slice(editIndex, newValue.length));\n  } else {\n  // Added characteres:\n  // Remove character after cursor and trim\n  // to the correct length\n    uca.answer = (newValue.slice(0, editIndex) + newValue.slice(editIndex + 1, newValue.length)).slice(0, oldLength);\n  }\n  return uca;\n}","import { boardSquare, clueAnswer } from '../types';\n\nexport default function updateAnswersOnBoard(board: boardSquare[][], uca: clueAnswer, dirIndex: number) {\n  // store kind of answer in property\n  const property: (\"acrossWordNumber\" | \"downWordNumber\") = dirIndex === 0 ? \"acrossWordNumber\" : \"downWordNumber\";\n\n  // Store new answer in flattened boardSquares array:\n  let answerIndex = 0;\n  const boardSquaresFlat: boardSquare[] = board\n    .flat()\n    .map((bs: boardSquare, index: number): boardSquare => {\n      const updatedBoardSquare = bs;\n      // Update board square with new value\n      if (bs[property] === uca.number) {\n        updatedBoardSquare.letter = uca.answer[answerIndex];\n        answerIndex += 1;\n      }\n    return updatedBoardSquare;\n  });\n  return boardSquaresFlat;\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Editor.css';\nimport Board from './Board';\nimport BoardSize from './BoardSize';\nimport Clues from './Clues';\nimport ModeSelect from './ModeSelect';\n\n// Types:\nimport { boardSquare, clueAnswer } from './types';\n\n// Helpers:\nimport activateAll from './helpers/activateAll';\nimport blankBoard from './helpers/blankBoard';\nimport calculateBoard from './helpers/calculateBoard';\nimport clearAll from './helpers/clearAll';\nimport condenseState from './helpers/condenseState';\nimport onSelectSquare from './helpers/onSelectSquare';\nimport recalculateBoard from './helpers/recalculateBoard';\nimport reGridBoard from './helpers/reGridBoard';\nimport reSizeBoard from './helpers/reSizeBoard';\nimport updateAnswer from './helpers/updateAnswer';\nimport updateAnswersOnBoard from './helpers/updateAnswersOnBoard';\n\nfunction Editor(): JSX.Element {\n\n  // Put this into a config at some point\n  const HOST = \"https://doodles.patrickweaver.net\";\n\n  const defaultBoardSize: number = 9;\n  const blankBoardAndClues: [boardSquare[][], clueAnswer[][]] = calculateBoard(blankBoard(defaultBoardSize))\n\n  // - - - - - - - - -\n  // State\n  // - - - - - - - - -\n  const [boardSize, setBoardSize] = useState(defaultBoardSize);\n  const [board, setBoard] = useState<boardSquare[][]>(blankBoardAndClues[0]);\n  // Build clueAnswers arrays from default empty board.\n  const [clueAnswers, setClueAnswers] = useState<clueAnswer[][]>(blankBoardAndClues[1]);\n  const recalculateBoardWithSet = (updatedBoard: boardSquare[][], updatedClueAnswers: clueAnswer[][]) => recalculateBoard(updatedBoard, updatedClueAnswers, setBoard, setClueAnswers);\n  const [mode, setMode] = useState<string>('normal');\n  const [selectedSquare, setSelectedSquare] = useState<[number, number]>([1, 1]);\n  const [selectedDirection, setSelectedDirection] = useState<string>(\"none\");\n  const onSelectSquareWithSet = (acrossWordNumber: number, downWordNumber: number, updateDirection: boolean) => onSelectSquare(selectedSquare, setSelectedSquare, selectedDirection, setSelectedDirection, acrossWordNumber, downWordNumber, updateDirection);\n\n  const updateClueAnswer = (type: (\"clue\" | \"answer\"), newValue: string, dirIndex: number, caIndex: number, selectionStart: number = 1): void => {\n    const updatedCAs: clueAnswer[][] = [...clueAnswers];\n    let uca: clueAnswer = updatedCAs[dirIndex][caIndex];\n    if (type === \"answer\") {\n      uca = updateAnswer(uca, newValue, selectionStart);\n      // Board is source of truth for answers\n      // send updated answer to board, then recalculate\n      // updated answers will be saved from updated board\n      const boardSquaresFlat = updateAnswersOnBoard(board, uca, dirIndex);\n      const reGridedBoard: boardSquare[][] = reGridBoard(boardSquaresFlat, boardSize);\n      recalculateBoardWithSet(reGridedBoard, clueAnswers);\n    } else {\n      uca.clue = newValue;\n      // Needed to save clue values\n      setClueAnswers(updatedCAs);\n    }\n  }\n\n  function updateBoardSize(newBoardSize: number): void {\n    let updatedBoard: boardSquare[][] = reSizeBoard(board, newBoardSize, boardSize);\n    setBoard(updatedBoard);\n    recalculateBoardWithSet(updatedBoard, clueAnswers);\n    setBoardSize(newBoardSize);\n  }\n\n  function copyLinkToGame(event: React.MouseEvent<HTMLButtonElement>) {\n    const gameLink: (HTMLElement | null) = document.getElementById(\"game-link\");\n    if (!gameLink) return ;\n    const gameLinkInput = gameLink as HTMLInputElement\n    gameLinkInput.select();\n    document.execCommand('copy');\n  }\n\n  return (\n    <div className=\"editor\">\n      <div className=\"header\">\n        <h1>Crossword Puzzle Composer</h1>\n\n        <p id=\"description\">This is a composer for creating crossword puzzles. Answer updates will display both on the board and next to the clues below. Double click on a square to toggle it on or off.</p>\n\n        <ul id=\"state\">\n          <li>\n            <Link to={`${process.env.PUBLIC_URL}/play#${condenseState(board, clueAnswers)}`} >\n              Play This Game\n            </Link>\n          </li>\n          <li>\n            <button onClick={copyLinkToGame}>Copy Link to This Game</button>\n          </li>\n          <li>\n            <input type=\"text\" id=\"game-link\" readOnly value={`${HOST}${process.env.PUBLIC_URL}/play/#${condenseState(board, clueAnswers)}`} />\n          </li>\n        </ul>\n      </div>\n\n      <div id=\"sections\">\n        <div id=\"board-container\">\n          <BoardSize boardSize={boardSize} updateBoardSize={updateBoardSize} />  \n\n          <ModeSelect mode={mode} onChange={(e) => setMode(e.target.value)} />\n\n          <Board\n            clueAnswers={clueAnswers}\n            board={board}\n            boardSize={boardSize}\n            updateBoard={(updatedBoard) => recalculateBoardWithSet(updatedBoard, clueAnswers)}\n            mode={mode}\n            selectedSquare={selectedSquare}\n            onSelectSquare={onSelectSquareWithSet}\n            selectedDirection={selectedDirection}\n            setSelectedDirection={(direction: string) => {\n              console.log(\"D:\", direction);\n              setSelectedDirection(direction);\n            }}\n            checkAnswers={false}\n          />\n\n          <div className=\"button-section\">\n            <button onClick={() => recalculateBoardWithSet(activateAll(board), clueAnswers)}>Activate All</button>\n            <button onClick={() => recalculateBoardWithSet(clearAll(board), clueAnswers)}>Clear All</button>\n          </div>\n        </div>\n        <div id=\"clues-container\">\n          <Clues\n            clueAnswers={clueAnswers}\n            updateClueAnswer={updateClueAnswer}\n            mode=\"editor\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Editor;\n","import { boardSquare} from '../types';\n\nexport default function activateAll(currentBoard: boardSquare[][]): boardSquare[][] {\n  return currentBoard.map(row => row.map(square => {\n    square.active = true;\n    return square;\n  }));\n}","import { boardSquare } from '../types';\n\nexport default function clearAll(currentBoard: boardSquare[][]): boardSquare[][] {\n  return currentBoard.map(row => row.map(square => {\n    if (square.active) {\n      square.letter = \"\";\n    }\n    return square;\n  }));\n}","import { boardSquare, clueAnswer } from '../types';\n\nexport default function expandState(b64State: string): [boardSquare[][], clueAnswer[][]] {\n\n  const [condBoard, condCA] = JSON.parse(atob(b64State));\n\n  function expWordStart(condWordStart: string): [boolean, boolean] {\n    const [a, b] = condWordStart.split(\"\");\n    const aBool = a === 't';\n    const bBool = b === 't';\n    return [aBool, bBool];\n  }\n\n  const board: boardSquare[][] = condBoard.map((a: string[]) => a.map(bs => {\n\n    const active = bs[0] === 't';\n    const letter = bs[1];\n    const wordStart = expWordStart(bs[2]);\n    const acrossWordNumber = bs[3];\n    const downWordNumber = bs[4];\n    const squareNumber = bs[5];\n\n    return {\n      active,\n      letter,\n      wordStart,\n      acrossWordNumber,\n      downWordNumber,\n      squareNumber\n    }\n  }));\n  const clueAnswers: clueAnswer[][] = condCA.map((dir: string[]) => dir.map(ca => {\n\n    const direction = ca[0] === 'd' ? 'down' : 'across';\n    const number = ca[1];\n    const clue = ca[2];\n    const answer = ca[3];\n    const firstLetterSquareNumber = ca[4];\n\n    return {\n      direction,\n      number,\n      clue,\n      answer,\n      firstLetterSquareNumber\n    }\n  }));\n  \n  return [board, clueAnswers];\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Board from './Board';\nimport Clues from './Clues';\n\nimport blankBoard from './helpers/blankBoard';\nimport calculateBoard from './helpers/calculateBoard';\nimport expandState from './helpers/expandState';\nimport onSelectSquare from './helpers/onSelectSquare';\nimport recalculateBoard from './helpers/recalculateBoard';\n\nimport './Game.css';\n\nimport { boardSquare, clueAnswer } from './types';\n\nexport default function Game(): JSX.Element {\n  const hash = window.location.hash\n  const hashTrimmed = hash.slice(1, hash.length);\n  const [hashBoard, hashClueAnswers] = expandState(hashTrimmed)\n  \n  const blankBoardAndClues: [boardSquare[][], clueAnswer[][]] = calculateBoard(blankBoard(hashBoard.length))\n\n  // Not sure why creating a copy of the object is necessary\n  const clearedBoard: boardSquare[][] = hashBoard.map((row: boardSquare[]) => row.map((square: boardSquare) => {\n    const updatedSquare = Object.assign({}, square);\n    updatedSquare.letter = \"\";\n    return updatedSquare;\n  }));\n  const [board, setBoard] = useState<boardSquare[][]>(clearedBoard);\n\n  // Build clueAnswers arrays from default empty board.\n  const [clueAnswers, setClueAnswers] = useState<clueAnswer[][]>(hashClueAnswers);\n  const [selectedSquare, setSelectedSquare] = useState<[number, number]>([0, 0]);\n  const [selectedDirection, setSelectedDirection] = useState<string>(\"across\");\n  const onSelectSquareWithSet = (acrossWordNumber: number, downWordNumber: number, updateDirection: boolean) => onSelectSquare(selectedSquare, setSelectedSquare, selectedDirection, setSelectedDirection, acrossWordNumber, downWordNumber, updateDirection);\n\n  const [checkAnswers, setCheckAnswers] = useState<boolean>(false);\n\n  function updateCheckAnswers(event: React.ChangeEvent<HTMLInputElement>):void {\n    setCheckAnswers(event.target.checked);\n  }\n\n  let game;\n  if (window.location.hash) {\n    game = (\n      <div>\n\n      <p id=\"description\">This is a crossword puzzle created in this app. The clues and correct answers are encoded in the URL, which is why it is so long. Toggle the checkbox below the board to autocheck your answers.</p>\n\n        <div id=\"sections\">\n          <div id=\"board-container\">\n            <Board\n              clueAnswers={clueAnswers}\n              board={board}\n              correctBoard={hashBoard}\n              boardSize={board.length}\n              updateBoard={(updatedBoard) => recalculateBoard(updatedBoard, clueAnswers, setBoard, setClueAnswers)}\n              mode={\"game\"}\n              selectedSquare={selectedSquare}\n              onSelectSquare={onSelectSquareWithSet}\n              selectedDirection={selectedDirection}\n              setSelectedDirection={setSelectedDirection}\n              checkAnswers={checkAnswers}\n            />\n            <div id=\"check-answers-toggle\">\n              <label>Check answers:</label>\n              <input type=\"checkbox\" onChange={updateCheckAnswers} />\n            </div>\n          </div>\n          <div id=\"clues-container\">\n            <Clues\n              clueAnswers={clueAnswers}\n              mode=\"game\"\n            />\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    game = (\n      <div>\n        <h2>Invalid Game Link</h2>\n        <p>This link does not correspond to a crossword. <Link to={`${process.env.PUBLIC_URL}/editor`}>Try making your own here.</Link></p>\n      </div>\n    )\n  }\n\n\n  return (\n    <div id=\"game\">\n      <p><Link to={`${process.env.PUBLIC_URL}/editor`}>Make your own crossword here.</Link></p>\n      <h1>Crossword Puzzle Game</h1>\n\n      {game}\n    </div>\n  )\n}","import React from 'react';\n\nimport './Footer.css';\n\nexport default function Footer(): JSX.Element {\n\n  return (\n    <div id=\"footer\">\n      <ul>\n        <li>Made by <a href=\"https://www.patrickweaver.net/\">Patrick Weaver</a></li>\n        <li><a href=\"https://github.com/patrickweaver/crossword\">View Source</a></li>\n      </ul>\n    </div>\n  )\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from 'react-router-dom';\n\nimport './App.css';\n\nimport Editor from './Editor';\nimport Game from './Game';\nimport Footer from './Footer';\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={`${process.env.PUBLIC_URL}/`}>\n          <Redirect to={`${process.env.PUBLIC_URL}/editor`} />\n        </Route>\n        <Route path={`${process.env.PUBLIC_URL}/editor`}>\n          <Editor />\n        </Route>\n        <Route path={`${process.env.PUBLIC_URL}/play`}>\n          <Game />\n        </Route>\n      </Switch>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}